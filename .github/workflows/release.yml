# I very blatantly ripped this from ripgrep (ty!)
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
#
# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    #   - release-ci
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
    # Set to force version number, e.g., when no tag exists.
    # OSRS_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      osrs_version: ${{ env.OSRS_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.OSRS_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "OSRS_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.OSRS_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.OSRS_VERSION }}
          release_name: ${{ env.OSRS_VERSION }}
          draft: true

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, win-msvc, win-gnu]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-2019
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-2019
            target: x86_64-pc-windows-gnu

    steps:
      - uses: actions/checkout@v2

      - name: Cache Rust files
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Enable after https://github.com/actions-rs/toolchain/issues/126
      # - name: Install Rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --verbose --release

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/release/osrs"

      - name: Build archive
        shell: bash
        run: |
          staging="osrs-${{ needs.create-release.outputs.osrs_version }}-${{ matrix.target }}"
          mkdir -p "$staging"

          cp {README.md,LICENSE} "$staging/"

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp target/release/osrs.exe "$staging"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp target/release/osrs "$staging"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
